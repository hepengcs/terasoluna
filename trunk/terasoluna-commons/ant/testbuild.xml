<?xml version="1.0" encoding="Shift_JIS"?>

<project name="terasoluna_commons" basedir=".." default="junit">

  <!-- ●●●●● 環境設定 ■■■■■■■■■■■■■■■■■■■■■■■■■ -->

  <!-- buildディレクトリ -->
  <property name="build.dir" value="${basedir}/ant" />

  <!-- ●●●●● プロパティファイル設定 ■■■■■■■■■■■■■■■■■■■■ -->
  <property file="${build.dir}/testbuild.properties" />

  <!-- ●●●●● プロパティ ■■■■■■■■■■■■■■■■■■■■■■■■■ -->

  <!--開発環境プロパティ-->
  <property name="project.root" value="${basedir}" />
  <property name="project.src.dir" value="${project.root}/sources" />
  <property name="project.classpath" value="${project.root}/classes" />
  <property name="project.lib.dir" value="${terasoluna.lib.home}/lib" />
  <property name="terasoluna.class" value="jp/terasoluna" />

  <!-- test環境のプロパティ -->
  <property name="test.root" value="${project.root}/testcases" />
  <property name="test.src.dir" value="${test.root}/testsources" />
  <property name="test.class.dir" value="${test.root}/testclasses" />
  <property name="test.lib.dir" value="${project.lib.dir}" />
  <property name="testreports.dir" value="${test.root}/reports" />
  <property name="coveragereports.dir" value="${test.root}/coverageReports" />

  <!-- Coberturaのパス -->
  <property name="cobertura.dir" value="${terasoluna.lib.home}/cobertura" />


  <!-- Cobertura カバレッジ計測 -->
  <taskdef classpath="${cobertura.dir}/cobertura.jar" resource="tasks.properties"/>

  <!-- ●●●●● クラスパスの設定 ■■■■■■■■■■■■■■■■■■■■ -->

  <property name="project.lib.classpath"
	        value="${project.lib.dir}/commons-logging-1.1.jar;
                   ${project.lib.dir}/commons-beanutils-1.7.0.jar;
  	               ${project.lib.dir}/commons-lang-2.3.jar;
  	               ${project.lib.dir}/commons-jxpath-1.2.jar;
                   ${project.lib.dir}/cglib-nodep-2.1_3.jar;
                   ${project.lib.dir}/spring.jar"/>

  <property name="test.lib.classpath"
            value="${test.lib.dir}/junit-3.8.2.jar;
                   ${test.lib.dir}/junit-addons-1.4.jar;
  	               ${test.lib.dir}/mockrunner-jdbc.jar;
                   ${test.lib.dir}/mockrunner.jar;
                   ${test.lib.dir}/terasoluna-utlib.jar;
                   ${test.lib.dir}/terasoluna-utlib-spring.jar;
                   ${test.lib.dir}/servlet-api.jar"/>
  <!-- Cobertura用 -->
  <property name="cobertura.class.path"
            value="${cobertura.dir}/cobertura.jar;
                   ${cobertura.dir}/lib/asm/asm-2.1.jar;
                   ${cobertura.dir}/lib/log4j/1.2.9/log4j-1.2.9.jar;
                   ${cobertura.dir}/lib/ncss/21.41/ccl.jar;
                   ${cobertura.dir}/lib/ncss/21.41/javancss.jar;
                   ${cobertura.dir}/lib/oro/jakarta-oro-2.0.8.jar" />
		               

  <!-- ●●●●● Cobertura カバレッジ計測実行   ■■■■■■■■■■■■■■■■■■■■■ -->
  <target name="coverage" depends="src_compile,test_compile">

    <!--前回作成したカバレッジ計測結果およびearファイルを削除-->
    <delete dir="${coveragereports.dir}"/>
    <mkdir dir="${coveragereports.dir}" />
    <mkdir dir="${coveragereports.dir}/instrument" />
    <delete dir="${project.root}">
      <include name="cobertura.ser" />
    </delete>
    <mkdir  dir="${coveragereports.dir}/xmlfile" />
  	
    <!--テスト実行時に必要なディレクトリを作成する。-->
    <mkdir dir="C:\tmp\test\rmdirs6" />
    <mkdir dir="C:\tmp\test\rmdirs7" />

    <cobertura-instrument todir="${coveragereports.dir}/instrument">
      <classpath>
      	<pathelement path="${cobertura.class.path}" />
      	<pathelement path="${test.class.dir}" />
      </classpath>
  
      <!-- ここで指定されたクラスが、レポート表示対象となる -->
      <fileset dir="${project.classpath}">
        <include name="${terasoluna.class}/fw/**/*.class"/>
      </fileset>
    </cobertura-instrument>
  	
    <!--プロパティファイルをinstrumentディレクトリへコピー　-->
    <copy todir="${coveragereports.dir}/instrument">
      <fileset dir="${project.classpath}">
        <include name="*.properties" />
      </fileset>
    </copy>
    <copy todir="${coveragereports.dir}/instrument">
      <fileset dir="${test.class.dir}">
        <include name="*.properties" />
      </fileset>
    </copy>

    <junit printsummary="yes" fork="yes" dir="${project.root}" filtertrace="off" showoutput="true">
      <classpath>
        <pathelement path="${coveragereports.dir}/instrument" />
        <pathelement path="${cobertura.class.path}" />
      	<pathelement path="${project.lib.classpath}" />
        <pathelement path="${test.lib.classpath}" />
      	<pathelement path="${project.classpath}" />
        <pathelement path="${test.class.dir}" />
      </classpath>
      
      <!--
          junitタスクにて実行されたJUnitテストの結果を出力する方法を定義する。
           ・type属性にて出力フォーマットをxmlに指定。
           ・usefile属性にて出力の対象をファイルにするかどうかを指定。
      -->
      <formatter type="xml" usefile="true"/>
      
      <batchtest fork="yes" todir="${build.dir}">
        <fileset dir="${test.src.dir}">
          <!--テスト対象-->
          <include name="${terasoluna.class}/fw/**/*Test*.java" />
        </fileset>
      </batchtest>
    </junit>

    <!--
        テスト結果のxmlをもとにHTMLを作成する。
        　・srcdir属性にてソースのディレクトリを指定。
        　・destdirにて、作成するHTMLの出力先を指定。
    -->
    <cobertura-report srcdir="${project.src.dir}" destdir="${coveragereports.dir}">
      <classpath>
        <pathelement path="${cobertura.class.path}" />
      </classpath>
    </cobertura-report>
  	
    <!--「TEST-*.xml」ファイルを作業用ディレクトリへコピー　-->
    <copy todir="${coveragereports.dir}/xmlfile">
      <fileset dir="${build.dir}" >
        <include name="TEST*.xml" />
      </fileset>
    </copy>

    <delete>
      <fileset dir="${build.dir}">
        <include name="TEST*.xml" />
      </fileset>
    </delete>

  </target>

  <!-- ●●●●● JUnit実行   ■■■■■■■■■■■■■■■■■■■■■■■■■■ -->
  <target name="junit" depends="src_compile,test_compile">

    <!--テスト実行時に必要なディレクトリを作成する。-->
    <mkdir dir="C:\tmp\test\rmdirs6" />
    <mkdir dir="C:\tmp\test\rmdirs7" />
  	
    <junit printsummary="on" fork="yes">
      <jvmarg value="-Xmx256M"/>

      <batchtest fork="yes">
        <fileset dir="${test.src.dir}">
          <include name="${terasoluna.class}/fw/**/*Test*.java" />
        </fileset>
      </batchtest>

      <formatter type="xml" usefile="true" />

      <classpath>
        <pathelement path="${project.lib.classpath}" />
        <pathelement path="${test.lib.classpath}" />
        <pathelement path="${project.classpath}" />
        <pathelement path="${test.class.dir}" />
      </classpath>

    </junit>

  	<!-- 前回作成したディレクトリを削除し、新しく生成 -->
    <delete dir="${testreports.dir}" />
    <mkdir  dir="${testreports.dir}" />
    <mkdir  dir="${testreports.dir}/xmlfile" />

    <!-- Junitレポート作成 -->
    <junitreport>
      <fileset dir="./">
        <include name="TEST*.xml" />
      </fileset>
      <report format="frames" todir="${testreports.dir}" />
    </junitreport>

    <!--「TEST-*.xml」ファイルを作業用ディレクトリへコピー　-->
    <copy todir="${testreports.dir}/xmlfile">
      <fileset dir="./">
        <include name="TEST*.xml" />
      </fileset>
    </copy>

    <delete>
      <fileset dir="./">
        <include name="TEST*.xml" />
      </fileset>
    </delete>
  </target>
	
  <!-- ●●●●● ソースファイルコンパイル実行 ■■■■■■■■■■■■■■■■■■ -->
  <target name="src_compile">
  	<echo level="info" message="ソースファイルをコンパイルします。"/>
  	<ant antfile="${build.dir}/build.xml" target="compile" inheritall="false"/>
  	<echo level="info" message="ソースファイルのコンパイルが完了しました。"/>
  </target>

  <!-- ●●●●● Testcaseコンパイル実行 ■■■■■■■■■■■■■■■■■■■■■ -->
  <target name="test_compile">
  	<echo level="info" message="古いクラスファイルを削除します。"/>
  	<delete includeEmptyDirs="true" failonerror="false">
	  <fileset dir="${test.class.dir}" includes="**/*"/>
	</delete>
  	<mkdir dir="${test.class.dir}"/>
  	
  	<echo level="info" message="テストケースをコンパイルします。"/>
  	<javac srcdir="${test.src.dir}" destdir="${test.class.dir}" debug="on" deprecation="on" nowarn="true">
      <classpath>
        <pathelement path="${project.lib.classpath}" />
        <pathelement path="${project.classpath}" />        
        <pathelement path="${test.lib.classpath}" />
      </classpath>
    </javac>
  	
  	<echo level="info" message="ソースフォルダの設定ファイルをコピーします。"/>
  	<copy todir="${test.class.dir}">
      <fileset dir="${test.src.dir}">
        <include name="*" />
      </fileset>
    </copy>
  	
  	<echo level="info" message="テストケースのコンパイルが完了しました。"/>
  </target>
	
  <!-- Cobertura用 -->
  <property name="testreports.dir" value="testcase/reports" />
 </project>
 